import asyncio
import datetime
from datetime import *
import logging
import sys
import sqlite3
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, Chat, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo, \
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import initialization
initialization.createcfg()
import config
import messages
import os
import platform
import psutil
import time


import sqlite3

class DatabaseHandler:
    def __init__(self, db_name='bot_db.sqlite'):
        self.db_name = db_name

    def create_media_groups_table(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã media_groups, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS media_groups (
                id TEXT PRIMARY KEY,
                user_id INTEGER,
                description TEXT,
                message_id INTEGER
            )
        ''')

        conn.commit()
        conn.close()

    def add_message_id_column(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ message_id –≤ —Ç–∞–±–ª–∏—Ü–µ media_groups
        cursor.execute("PRAGMA table_info(media_groups);")
        columns = [col[1] for col in cursor.fetchall()]

        # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ message_id –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if "message_id" not in columns:
            cursor.execute('ALTER TABLE media_groups ADD COLUMN message_id INTEGER;')

        conn.commit()
        conn.close()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
db_handler = DatabaseHandler()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
db_handler.create_media_groups_table()
db_handler.add_message_id_column()



logging.basicConfig(level=logging.DEBUG, stream=sys.stdout)

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(storage=storage)
logger = logging.getLogger(__name__)

send = KeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
send_addmore = KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ")
send_next = KeyboardButton(text="‚è≠ –î–∞–ª—å—à–µ")
desc_skip = KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
needhelp = KeyboardButton(text="‚Äº –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")
menu = KeyboardButton(text="‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
help_withpost = KeyboardButton(text="‚ùó–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–æ–≤")
help_connect = KeyboardButton(text="üë§–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
help_botinfo_github = InlineKeyboardButton(text="GitHub", url="https://github.com/svkkkurai/sleepwalkeerrbot")
shutdown_button = InlineKeyboardButton(text="‚ùó–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="shutdown")
discard = InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="discard")

shutdown_markup = InlineKeyboardMarkup(inline_keyboard=[[shutdown_button, discard]])

github_markup = InlineKeyboardMarkup(inline_keyboard=[[help_botinfo_github]])

main_markup = ReplyKeyboardMarkup(
    keyboard=[[send, needhelp]],
    resize_keyboard=True
)

cancel_markup = ReplyKeyboardMarkup(
    keyboard=[[menu]],
    resize_keyboard=True
)

help_markup = ReplyKeyboardMarkup(
    keyboard=[[help_withpost, help_connect, menu]],
    resize_keyboard=True
)

add_more_markup = ReplyKeyboardMarkup(
    keyboard=[[send_next, menu]],
    resize_keyboard=True
)

add_desc_markup = ReplyKeyboardMarkup(
    keyboard=[[desc_skip, menu]],
    resize_keyboard=True
)

class UserStates(StatesGroup):
    waiting_photo_or_video = State()
    waiting_media = State()
    waiting_more_media = State()
    waiting_description = State()
    waiting_message_to_moderator = State()

def init_db():
    conn = sqlite3.connect('bot_db.sqlite')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS media_groups (
            id TEXT PRIMARY KEY,
            user_id INTEGER,
            description TEXT,
            message_id INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS media_files (
            group_id TEXT,
            file_id TEXT,
            type TEXT,
            FOREIGN KEY(group_id) REFERENCES media_groups(id)
        )
    ''')
    conn.commit()
    return conn

def update_db_schema():
    conn = sqlite3.connect('bot_db.sqlite')
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ message_id –≤ —Ç–∞–±–ª–∏—Ü–µ media_groups
    cursor.execute("PRAGMA table_info(media_groups);")
    columns = [col[1] for col in cursor.fetchall()]
    if "message_id" not in columns:
        cursor.execute('ALTER TABLE media_groups ADD COLUMN message_id INTEGER;')
    conn.commit()
    conn.close()

update_db_schema()

db_conn = init_db()

async def get_channel_info(bot: Bot, chat_id: int):
    try:
        chat: Chat = await bot.get_chat(chat_id)
        title = chat.title
        invite_link = chat.invite_link if chat.invite_link else f"https://t.me/{chat.username}"
        return title, invite_link
    except Exception as e:
        logging.error(f"Error getting channel info: {e}")
        return None, None

@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    title, link = await get_channel_info(bot, config.CHANNEL_ID)
    if title:
        await message.reply(
            f"‚ù§–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–ø—Ä–µ–¥–ª–æ–∂–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ [{title}]({link}). –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç!"
            f"\n‚ÑπÔ∏è–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –Ω–∏–∂–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=main_markup,
            disable_web_page_preview=True
        )
    else:
        await message.reply(
            "–£–ø—Å.. –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ."
        )
    await state.clear()


@dp.message(Command("myid"))
async def my_id_command(message: Message):
    await message.reply(f"Your Telegram ID: {message.from_user.id}", parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("sysinfo"))
async def sysinfo(message: Message):
    user_name = os.getlogin()
    os_name = platform.system() + " " + platform.release()
    build_version = platform.version()
    uptime_seconds = time.time() - psutil.boot_time()
    uptime_struct = time.gmtime(uptime_seconds)
    uptime = f"{uptime_struct.tm_yday - 1} days, {uptime_struct.tm_hour} hours, {uptime_struct.tm_min} minutes"
    screen_resolution = "1920x1080 @60Hz"
    cpu_info = platform.processor()
    gpu_info = "Intel(R) UHD Graphics"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
    virtual_memory = psutil.virtual_memory()
    total_memory = virtual_memory.total // (1024 * 1024)
    used_memory = virtual_memory.used // (1024 * 1024)
    memory_usage_percentage = virtual_memory.percent

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
    disk_usage = psutil.disk_usage('/')
    total_disk = disk_usage.total // (1024 * 1024 * 1024)
    free_disk = disk_usage.free // (1024 * 1024 * 1024)
    disk_usage_percentage = disk_usage.percent

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await message.reply(
        f"<b>{user_name}@{platform.node()}</b>\n"
        f"--------------\n"
        f"<b>OS:</b> {os_name}\n"
        f"<b>Build:</b> {build_version}\n"
        f"<b>Uptime:</b> {uptime}\n"
        f"<b>Resolution:</b> {screen_resolution}\n" 
        f"<b>Terminal:</b> {os.environ.get('COMSPEC', 'cmd.exe')}\n"
        f"<b>CPU:</b> {cpu_info}\n"
        f"<b>GPU:</b> {gpu_info}\n"
        f"<b>Memory:</b> {used_memory} MB / {total_memory} MB ({memory_usage_percentage}% in use)\n"
        f"<b>Disk:</b> / {total_disk} GB ({free_disk} GB free)",
        parse_mode=ParseMode.HTML
    )


@dp.message(Command("shutdown"))
async def shutdown(message: Message):
    if message.from_user.id == config.SENIOR_ADMIN:
        await message.reply("‚ùó–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã?", reply_markup=shutdown_markup)
    else:
        await message.reply("üíî–í–∞—à–∏—Ö –ø—Ä–∞–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")


@dp.message(Command("bot_info"))
async def shutdown(message: Message):
    await message.reply(messages.help_botinfo, reply_markup=github_markup, parse_mode=ParseMode.MARKDOWN)


@dp.message(Command("chat_id"))
async def chat_id_command(message: Message):
       await message.reply(f"Here's the data of chat.\nJSON: \n```\n{message.chat}```", parse_mode=ParseMode.MARKDOWN)


@dp.message(UserStates.waiting_media)
async def receive_first_media(message: Message, state: FSMContext):
    if message.text == menu.text:
        await message.reply("‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)
        await state.clear()
    else:
        await process_media(message, state)
        await message.reply("‚úÖ–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –∞–ª—å–±–æ–º—É.", reply_markup=add_more_markup)
        await state.set_state(UserStates.waiting_more_media)


@dp.message(UserStates.waiting_more_media)
async def receive_more_media(message: Message, state: FSMContext):
    if message.text == send_next.text:
        await message.reply("üìù–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=add_desc_markup)
        await state.set_state(UserStates.waiting_description)
    elif message.text == menu.text:
        await message.reply("‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)
        await state.clear()
    else:
        await process_media(message, state)
        await message.reply("‚ÑπÔ∏è–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É.", reply_markup=add_more_markup)

async def process_media(message: Message, state: FSMContext):
    data = await state.get_data()
    media_group = data.get("media_group", [])
    group_id = data.get("group_id")

    if not group_id:
        group_id = str(uuid.uuid4())
        await state.update_data(group_id=group_id)

    cursor = db_conn.cursor()
    if message.content_type == types.ContentType.PHOTO:
        file_id = message.photo[-1].file_id
        media_group.append(InputMediaPhoto(media=file_id))
        cursor.execute('INSERT INTO media_files (group_id, file_id, type) VALUES (?, ?, ?)', (group_id, file_id, 'photo'))
    elif message.content_type == types.ContentType.VIDEO:
        file_id = message.video.file_id
        media_group.append(InputMediaVideo(media=file_id))
        cursor.execute('INSERT INTO media_files (group_id, file_id, type) VALUES (?, ?, ?)', (group_id, file_id, 'video'))
    db_conn.commit()

    await state.update_data(media_group=media_group)

approve_button = InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="approve")
reject_button = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject")
inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[approve_button, reject_button]])

@dp.message(UserStates.waiting_description)
async def receive_description(message: Message, state: FSMContext):
    if message.text == menu.text:
        await message.reply("‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)
        await state.clear()
        return

    description = message.text if message.text != desc_skip.text else ""
    data = await state.get_data()
    group_id = data.get("group_id")

    cursor = db_conn.cursor()
    cursor.execute('INSERT INTO media_groups (id, user_id, description) VALUES (?, ?, ?)', (group_id, message.from_user.id, description))
    db_conn.commit()

    cursor.execute('SELECT file_id, type FROM media_files WHERE group_id = ?', (group_id,))
    files = cursor.fetchall()

    media_group = []
    for i, (file_id, file_type) in enumerate(files):
        if file_type == 'photo':
            if i == len(files) - 1:
                media_group.append(InputMediaPhoto(media=file_id, caption=f"{description}\nüë§[{message.from_user.full_name}](tg://user?id={message.from_user.id})", parse_mode=ParseMode.MARKDOWN))
            else:
                media_group.append(InputMediaPhoto(media=file_id))
        elif file_type == 'video':
            if i == len(files) - 1:
                media_group.append(InputMediaVideo(media=file_id, caption=f"{description}\nüë§[{message.from_user.full_name}](tg://user?id={message.from_user.id})", parse_mode=ParseMode.MARKDOWN))
            else:
                media_group.append(InputMediaVideo(media=file_id))

    if media_group:
        sent_messages = await bot.send_media_group(config.MODER_CHAT_ID, media_group)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id
        message_id = sent_messages[0].message_id
        cursor.execute('UPDATE media_groups SET message_id = ? WHERE id = ?', (message_id, group_id))
        db_conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        await bot.send_message(
            config.MODER_CHAT_ID,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–æ–±—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç.",
            reply_markup=inline_keyboard,
            reply_to_message_id=message_id
        )

        await message.reply("‚úÖ–í–∞—à–∏ —Ñ–∞–π–ª—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –°–ø–∞—Å–∏–±–æ!")
        await bot.send_message(message.chat.id, text="‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)
    else:
        await message.reply("‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.", reply_markup=main_markup)

    await state.clear()


@dp.callback_query(lambda c: c.data in ["approve", "reject"])
async def process_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    cursor = db_conn.cursor()

    logging.debug(f"callback_query.message.reply_to_message.message_id: {callback_query.message.reply_to_message.message_id}")

    cursor.execute('SELECT id FROM media_groups WHERE message_id = ?', (callback_query.message.reply_to_message.message_id,))
    result = cursor.fetchone()

    if result is None:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤.")
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è message_id: {callback_query.message.reply_to_message.message_id}")
        return

    group_id = result[0]

    if action == "approve":
        cursor.execute('''
            SELECT media_files.file_id, media_files.type, media_groups.description, media_groups.user_id
            FROM media_files
            JOIN media_groups ON media_files.group_id = media_groups.id
            WHERE media_groups.id = ?
        ''', (group_id,))
        files = cursor.fetchall()

        user_id = files[0][3]
        user = await bot.get_chat(user_id)
        title, link = await get_channel_info(bot, config.CHANNEL_ID)

        media_group = []
        for i, (file_id, file_type, description, _) in enumerate(files):
            caption = f"{description}\nüë§[{user.full_name}](tg://user?id={user.id})\n\n[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è]({link}) | [–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç](tg://user?id=7412484247)" if i == len(files) - 1 else None
            if file_type == 'photo':
                media_group.append(InputMediaPhoto(media=file_id, caption=caption, parse_mode=ParseMode.MARKDOWN))
            elif file_type == 'video':
                media_group.append(InputMediaVideo(media=file_id, caption=caption, parse_mode=ParseMode.MARKDOWN))

        if media_group:
            await bot.send_media_group(config.CHANNEL_ID, media_group)
        today = date.today()
        utc_vanilla = datetime.now(timezone.utc)
        UTC = utc_vanilla.strftime("%H:%M")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚úÖ–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: [{callback_query.from_user.full_name}](tg://user?id={callback_query.from_user.id}), {today} –≤ {UTC} –ø–æ UTC.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=None
        )
    elif action == "reject":
        today = date.today()
        utc_vanilla = datetime.now(timezone.utc)
        UTC = utc_vanilla.strftime("%H:%M")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚ùå–û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: [{callback_query.from_user.full_name}](tg://user?id={callback_query.from_user.id}), {today} –≤ {UTC} –ø–æ UTC.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=None
        )

        await callback_query.answer()

@dp.callback_query(lambda callback_query: callback_query.data in ["shutdown", "discard"])
async def handle_callback(callback_query: CallbackQuery):
    action = callback_query.data
    if action == "shutdown":
        await callback_query.message.edit_text("üí¢–í—ã–∫–ª—é—á–∞—é —Å–∏—Å—Ç–µ–º—É...")
        if os.name == 'nt':
            os.system('shutdown /s /t 0')
        elif os.name == 'posix':
            os.system('sudo shutdown now')
    elif action == "discard":
            await callback_query.message.edit_text("‚ùó–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")



user_moderator_map = {}

@dp.message(UserStates.waiting_message_to_moderator)
async def receive_message_to_moderator(message: Message, state: FSMContext):
    if message.text == menu.text:
        await message.reply("‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)
        await state.clear()
    else:
        forwarded_message = await bot.forward_message(
            chat_id=config.MODER_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id
        )
        user_moderator_map[forwarded_message.message_id] = message.from_user.id
        await message.reply("*‚ùó–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.*\n\n–£—á—Ç–∏—Ç–µ, —á—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –∏–Ω–∞—á–µ –æ—Ç–≤–µ—Ç –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è.", parse_mode=ParseMode.MARKDOWN)
        await state.clear()
        await bot.send_message(message.from_user.id, "‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)

@dp.message(lambda message: message.reply_to_message and message.reply_to_message.forward_from)
async def handle_reply_from_moderator(message: Message):
    original_user_id = user_moderator_map.get(message.reply_to_message.message_id)
    if original_user_id:
        await bot.send_message(
            original_user_id,
            f"‚ùó–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!\n`{message.text}`\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *¬´‚Äº –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Üí –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º¬ª*",
            parse_mode=ParseMode.MARKDOWN
        )
        await message.reply("‚úÖ–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@dp.message()
async def handle_buttons(message: Message, state: FSMContext):
    if message.text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        await state.clear()
        await state.set_state(UserStates.waiting_media)
        await message.reply("‚ÑπÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ!", reply_markup=cancel_markup)
    elif message.text == "‚Äº –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å":
        await message.reply("‚Åâ–° —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?", reply_markup=help_markup)
    elif message.text == "‚ùó–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç–æ–≤":
        await message.reply(f"{messages.help_howtopost}", reply_markup=main_markup, parse_mode=ParseMode.MARKDOWN)
    elif message.text == "üë§–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º":
        await state.set_state(UserStates.waiting_message_to_moderator)
        await message.reply("‚Åâ–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=cancel_markup)
    elif message.text == "‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await message.reply("‚ÑπÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_markup)
        await state.clear()
    else:
        await bot.send_message(message.from_user.id, "‚ÑπÔ∏è –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=main_markup)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
